package moe.neat.multiplayerhc;

import moe.neat.multiplayerhc.standalone.Main;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;
import java.util.Properties;
import java.util.logging.Logger;

/**
 * Class for managing the plugins configuration file.
 * This is used instead of bukkits built in system because there were issues with parsing the yml generated by bukkit
 * outside of bukkit.
 * Instead a simpler .properties file is used and stored in the plugins data directory
 */
public class ConfigManager {

    private static final String CONFIG_DIR_NAME = "MultiplayerHc";
    private static final String CONFIG_FILE_NAME = "config.properties";
    private static final Logger LOGGER = Logger.getLogger(ConfigManager.class.getName());

    private static final Properties prop = new Properties();
    private static final Path jar = Paths.get(Main.class.getProtectionDomain().getCodeSource().getLocation().getPath());
    private static final Path configDir = jar.getParent().resolve(CONFIG_DIR_NAME);
    private static final Path config = configDir.resolve(CONFIG_FILE_NAME);

    static {

        if (!configDir.toFile().exists() && !configDir.toFile().mkdir()) {
            LOGGER.severe("Failed to create config dir.");
        }

        if (!config.toFile().exists()) {
            try {
                Files.createFile(config);
                Files.write(config, Objects.requireNonNull(ConfigManager.class.getClassLoader()
                        .getResourceAsStream(CONFIG_FILE_NAME))
                        .readAllBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        try {
            prop.load(Files.newInputStream(config));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private ConfigManager () {
        throw new IllegalStateException("Utility class");
    }

    /**
     * Stores a value to the config.properties file
     *
     * @param key The key that should be used
     * @param value The value that should be stored at said key
     */
    public static void save(String key, String value) throws IOException {
        prop.setProperty(key, value);

        try (var stream = Files.newOutputStream(config)) {
            prop.store(stream, null);
        }
    }

    /**
     * Reads a value from the config.properties file
     *
     * @param key Key that should be fetched
     * @return Value based on key
     */
    public static String read(String key) {
        return (String) prop.get(key);
    }
}
